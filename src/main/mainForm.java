package main;

import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.Timer;

public class mainForm extends javax.swing.JFrame {
// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel jPanelResult;
private javax.swing.JPanel jPanelTerrain;
// End of variables declaration//GEN-END:variables

private ArrayList<Adversary> contendenti = new ArrayList<>();
private ArrayList<javax.swing.JLabel> values = new ArrayList<>();
private javax.swing.Timer timerUpdateSimulation;
private int timer_counter = 0;

public mainForm() throws Exception {
	initComponents();
	Food food = new Food(1024, 640, Food.Distribution.SQUARE);
	Bacteria.setFood(food);
	try {
		inizializzaBatteri();
	} catch (Exception e) {
		System.out.println("panic during inizialization");
		System.exit(1);
	}
	this.jPanelTerrain.add(new JPanel() {
		@Override
		public void paintComponent(Graphics g) {
			g.setColor(jPanelTerrain.getBackground());
			g.fillRect(0, 0, this.getWidth(), this.getHeight());
			for (var c : contendenti) {
				g.setColor(c.color);
				for (int i=0; i<c.entities.size(); i++) {
					Bacteria b = (Bacteria) c.entities.get(i);
					g.fillRect(b.x, b.y, 3, 3);
				}
			}
			// TODO painting have some bugs
			g.setColor(Color.GREEN);
			for (int x = 0; x < food.getHeight(); x++) {
				int y = food.food[x].nextSetBit(0);
				while (y != -1) {
					g.fillRect(y, x, 2, 2);
					y = food.food[x].nextSetBit(y+1);
				}
			}
		}
	});

	javax.swing.JButton btnStart = new javax.swing.JButton("Start");
	btnStart.addActionListener((ActionEvent e) -> {
		timerUpdateSimulation.start();
	});
	this.jPanelResult.add(btnStart);
	javax.swing.JButton btnStop = new javax.swing.JButton("Stop");
	btnStop.addActionListener((ActionEvent e) -> {
		timerUpdateSimulation.stop();
	});
	this.jPanelResult.add(btnStop);
	pack();
	this.setSize(
		Food.getWidth() + 300, // LARGHEZZA_PANNELLO_LATERALE
		Food.getHeight() + 50  // ALTEZZA_BORDO
	);

	timerUpdateSimulation = new Timer(50, (ActionEvent e) -> {
		simulation_cycle();
		jPanelTerrain.repaint();
		if (timer_counter++ % 20 != 0) return;
		food.toggle();
		// TODO FPS counter
		for (int i = 0; i < contendenti.size(); i++) {
			if (contendenti.get(i).entities.isEmpty()) {
				System.out.println("(" + contendenti.get(i).name + " is dead)");
				values.get(i).setText(contendenti.get(i).name + " 0");
				values.remove(i);
				contendenti.remove(i);
				i--;
			} else {
				values.get(i).setText(
					contendenti.get(i).name + " " + 
					contendenti.get(i).entities.size() + " " +
					contendenti.get(i).medium_time
				);
			}
		}
	});
}

private void inizializzaBatteri() throws Exception {
	Path path = Paths.get("./build/classes/children/");
	var names = Files.walk(path)
		.map(Path::getFileName)
		.map(Path::toString)
		.filter(n -> n.endsWith(".class"))
		.map(n -> n.replace(".class", ""))
		.collect(Collectors.toCollection(ArrayList::new));
	if (names.isEmpty()) {
		System.out.println("no classes found in " + path);
	} else {
		System.out.println("Classes found:");
		for (String name : names) System.out.println("- " + name);
	}

	for (int i = 0; i < names.size(); i++) {
		String name = names.get(i);
		try {
			Adversary<?> c = new Adversary<>(
				name,
				Class.forName("children." + name)
			);
			contendenti.add(c);
			values.add(new javax.swing.JLabel(
				name + " " + contendenti.get(i).entities.size()
			));
			values.get(i).setForeground(contendenti.get(i).color);
			jPanelResult.add(values.get(i));
		} catch (Exception e) {
			System.out.println(e);
			System.out.println(name + " panics during constructor hooking");
			names.remove(i);
		}
		
	}
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
private void initComponents() {
	jPanelResult = new javax.swing.JPanel();
	jPanelTerrain = new javax.swing.JPanel();
	setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	setTitle("Bacteria");
	setMinimumSize(new java.awt.Dimension(1324, 700));
	setResizable(false);
	jPanelResult.setBorder(javax.swing.BorderFactory.createLineBorder(
		new java.awt.Color(0, 0, 0)
	));
	jPanelResult.setMinimumSize(new java.awt.Dimension(150, 100));
	jPanelResult.setPreferredSize(new java.awt.Dimension(300, 70));
	jPanelResult.setLayout(new javax.swing.BoxLayout(
		jPanelResult, javax.swing.BoxLayout.Y_AXIS
	));
	getContentPane().add(jPanelResult, java.awt.BorderLayout.LINE_END);
	jPanelTerrain.setBackground(new java.awt.Color(255, 255, 255));
	jPanelTerrain.setMinimumSize(new java.awt.Dimension(1324, 700));
	jPanelTerrain.setPreferredSize(new java.awt.Dimension(1024, 700));
	jPanelTerrain.setLayout(new java.awt.BorderLayout());
	getContentPane().add(jPanelTerrain, java.awt.BorderLayout.CENTER);
	pack();
}// </editor-fold>//GEN-END:initComponents

public static void main(String args[]) {
	try {
		new mainForm().setVisible(true);
	} catch (Exception e) {
		System.exit(1);
	}
}

// TODO improve for cache locality
private void simulation_cycle() {
	// shuffle contendenti for fairness
	var order = new ArrayList<Integer>(contendenti.size());
	for (int i = 0; i < contendenti.size(); i++) {
		order.add(i);
	}
	Collections.shuffle(order);

	for (var index : order) {
		ArrayList<Bacteria> babies = new ArrayList<>();
		Adversary c = contendenti.get(index);
		var start = System.nanoTime();
		for (Iterator<Bacteria> i = c.entities.iterator(); i.hasNext();) {
			Bacteria b = i.next();
			if (! b.run()) {
				i.remove();
				continue;
			}
			if (b.isReadyForCloning()) {
				int xp = b.x, yp = b.y;
				try {
					Bacteria clone = (Bacteria) b.clone();
					// imporre al figlio le stesse coordinate del padre
					clone.x = xp; clone.y = yp;
					babies.add(clone);
				} catch (Exception e) {
					System.out.println(c.name + " panics during cloning");
				}
				// evitare che il padre si muova durante la fase di
				// clonazione senza consumare salute
				b.x = xp; b.y = yp;
			}
		}
		var end = System.nanoTime() - start;
		if (c.entities.isEmpty()) continue;
		c.medium_time = (c.medium_time + end / c.entities.size())/2;
		c.entities.addAll(babies); // should improve cache locality
	}
}
}
